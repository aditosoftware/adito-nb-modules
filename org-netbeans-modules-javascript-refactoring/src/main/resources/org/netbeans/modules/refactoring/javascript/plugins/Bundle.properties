# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.

DSC_ElNotAvail=The original element being refactored is not available. It was deleted or significantly changed. Usages cannot be collected.
DSC_ElementNotResolved=Cannot refactor unresolved elements
ERR_ProjectNotOpened=Cannot refactor code that is defined outside of an open project.


# rename error messages
ERR_RenameWrongType=Cannot rename this type of object. JavaScript package, method, field or class has to be selected.
ERR_Overrides=This method overrides or implements methods in super classes/interfaces. They will also be renamed.
ERR_Overrides_Fatal=This method overrides or implements methods in super classes/interfaces, so its name cannot be changed.
ERR_Overrides_tree=This method overrides or implements a method in {0}. This method is also overridden or implemented in {1}. If you really want to perform this operation, invoke it on the method in {2}.
ERR_IsOverridden=There are methods in subclasses/implementors of {0} that override or implement this method. They will also be renamed.
ERR_WillBeOverridden=After renaming, the original method "{0}" in {1} will be overridden by method "{2}" in {3}.
ERR_WillBeOverridden_access=After renaming, the original method {0} in {1} will be overridden by method "{2}" in {3} with weaker access privileges.
ERR_WillBeOverridden_static=After renaming, the original {0} method "{1}" in {2} will be overridden by {3} method "{4}" in {5}.
ERR_WillBeOverridden_final=After renaming, the original final method "{0}" in {1} will be overridden by method "{2}" in {3}.
ERR_WillOverride=After renaming, method "{0}" in {1} will override the original method "{2}" in {3}.
ERR_WillOverride_access=After renaming, method {0} in {1} will override the original method "{2}" in {3} with stronger access privileges.
ERR_WillOverride_static=After renaming, {0} method "{1}" in {2} will override the original {3} method "{4}" in {5}.
ERR_WillOverride_final=After renaming, method "{0}" in {1} will override the original final method "{2}" in {3}.
ERR_NameNotChanged=The name has not been modified. No changes will be performed.
ERR_InvalidIdentifier="{0}" is not a valid JavaScript identifier.
ERR_InvalidClassName="{0}" is not a valid JavaScript class name.
ERR_InvalidMethodName="{0}" is not a valid JavaScript function name.
ERR_InvalidPackage="{0}" is not a valid package identifier.
ERR_PackageExists=Package "{0}" already exists.
ERR_InnerClassClash=Cannot rename. Inner class {0} already exists in class {1}.
ERR_ClassClash=Cannot rename. Class {0} already exists in folder {1}.
ERR_MethodClash=Cannot rename. Method {0} with the same signature already exists in class {1}.
ERR_FieldClash=Cannot rename. Field {0} already exists in class {1}.
ERR_LocVariableClash=Cannot rename. {0} already used.
ERR_Hides=The field to be renamed hides a field in {0}.
ERR_WillHide=The new field will hide a field in {0}.
ERR_NameNotSet=The name has not been specified.
ERR_CannotMoveIntoSamePackage=Cannot move class(es) into the same package.
ERR_CannotRenameFile=Cannot rename element in library file: "{0}".
ERR_ResourceUnavailable=Cannot rename method "{0}". Source file "{1}" not available.

#where used error messages
ERR_WhereUsedWrongType=Cannot search for usages of this type of object. A JavaScript element has to be selected.

# move class/package error messages
ERR_TargetFolderNotSet=A target package has not been specified.
ERR_SourceWithoutClass=Selected source does not contain any class.
ERR_SourceWithMoreClasses=You can not move a class from a source file that contains multiple top-level classes.
ERR_AccessesPackagePrivateFeature=Class "{0}" within the same package is using {1} {2} "{3}" of class you want to move ("{4}").
ERR_AccessesPackagePrivateClass=Class "{0}" within the same package is using {1} class you want to move ("{2}").
ERR_AccessesPackagePrivateConstructor=Class "{0}" within the same package is using {1} constructor declared in class you want to move ("{2}").
ERR_AccessesPackagePrivateFeature2=Class you want to move ("{0}") is using {1} {2} "{3}" of class "{4}" within the same package.
ERR_AccessesPackagePrivateClass2=Class you want to move ("{0}") is using {1} class ("{2}") within the same package.
ERR_AccessesPackagePrivateConstructor2=Class you want to move ("{0}") is using {1} constructor declared in class ("{2}") within the same package.
ERR_PackageIsReadOnly=Package "{0}" is read only.
ERR_ClassToMoveClashes=Class "{0}" already exists in the target package.
ERR_ClassToMoveInDefaultPackage=After the move, it will not be possible to import classes in the original default package.
ERR_MovingClassToDefaultPackage=If the class is moved to the default package, classes in other packages will not be able to import the moved class.
ERR_FileAlreadyExists=File {0} already exists in package {1}.
ERR_PackageMovesToItself=The parent package has been selected as the destination. There are no changes to be performed.
ERR_CannotMovePackageToSubpackage=A package cannot be moved into one of its subpackages or into itself.
ERR_DefaultPackageCannotBeMoved=Default package cannot be moved.
ERR_CannotMoveFile=Cannot move file from library: "{0}".

# change method signature error messages
ERR_MethodOverrides=The method overrides or implements methods in super classes/interfaces.
ERR_MethodIsOverridden=There are methods in subclasses or implementors of {0} that override or implement the method.
ERR_HasVarArg=You cannot use the Change Method Parameters refactoring on methods with variable arguments.
ERR_newpar=You have to provide {0} for all new parameters.
ERR_parname=parameter name
ERR_partype=parameter type
ERR_pardefv=default values
ERR_existingMethod=Cannot change signature. Method {0} with the same signature already exists in class {1}.
ERR_existingConstr=Cannot change signature. Constructor with the same signature already exists in class {0}.
ERR_NoValues=You have to provide values for the new parameters.
ERR_DuplicateName=Duplicate parameter name ({0}).
ERR_NameAlreadyUsed=Name "{0}" is already used as a name of local variable.
ERR_CannotChangeModifiers=Cannot change modifiers of method in interface.
ERR_StrongAccMod=You changed the access modifier to {0}. Method will not be accessible for some of references. The sources will not compile after refactoring!

ERR_ChangeParamsWrongType=Cannot change parameters of this object. A method or the constructor has to be selected.
MSG_NothingToFind=You have not selected anything to find. Select Find Usages, Find Overriding Methods, or both.
ERR_CannotRefactorFile=Cannot refactor read-only file "{0}"

# Extract method error and warings

# Rename
ParseErrorFile=Parse error in file which contains {0} reference - skipping it
ChangeComment=Change comment
UpdateMethodDef=Rename method definition
UpdateCall=Update method call
UpdateClass=Update class
UpdateSymbol=Rename symbol
UpdateClassDef=Rename class definition
UpdateModule=Rename module definition
UpdateLocalvar=Rename local variable
UpdateParam=Rename parameter
UpdateDynvar=Rename dynamic variable
UpdateGlobal=Rename global variable reference
UpdateInstance=Rename instance variable reference
UpdateClassvar=Rename class variable reference
UpdateRef=Update reference to {0}
RenameParam=Rename parameter
